import tkinter as tk
from tkinter import messagebox, scrolledtext
from scapy.all import sniff, wrpcap
import logging
import threading

import netifaces

# Set up logging
logging.basicConfig(filename='network_sniffer.log', level=logging.INFO, format='%(asctime)s - %(message)s')

class NetworkSnifferApp:
    def _init_(self, master):
        self.master = master
        self.master.title("Network Sniffer")

        # Initialize lock for thread safety
        self.lock = threading.Lock()

        # GUI components initialization (labels, entries, buttons, etc.)
        # ...

        self.captured_packets = []
        self.sniffer_thread = None
        self.sniffer_running = False

    def is_valid_interface(self, interface):
        """Check if the provided network interface is valid."""
        return interface in netifaces.interfaces()

    def packet_callback(self, packet):
        """Callback function for processing captured packets."""
        with self.lock:
            self.captured_packets.append(packet)
            logging.info(packet.summary())
            self.output_area.insert(tk.END, packet.summary() + "\n")

    def start_sniffer(self):
        """Start the packet sniffer."""
        interface = self.interface_entry.get()
        count = self.count_entry.get()

        # Validate interface
        if not self.is_valid_interface(interface):
            messagebox.showerror("Input Error", "Invalid network interface.")
            return

        # Validate packet count
        if not count.isdigit() or int(count) < 0:
            messagebox.showerror("Input Error", "Please enter a valid number of packets.")
            return

        count = int(count) if count.isdigit() else 0

        self.sniffer_running = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.save_button.config(state=tk.DISABLED)

        try:
            self.sniffer_thread = threading.Thread(target=self.run_sniffer, args=(interface, count))
            self.sniffer_thread.start()
        except Exception as e:
            logging.error(f"An error occurred while starting the sniffer: {e}")
            messagebox.showerror("Error", "An unexpected error occurred while starting the sniffer.")

    def run_sniffer(self, interface, count):
        """Run the packet sniffer."""
        try:
            sniff(iface=interface, prn=self.packet_callback, count=count, store=0)
        except Exception as e:
            logging.error(f"An error occurred while sniffing: {e}")
            messagebox.showerror("Error", "An unexpected error occurred while sniffing.")
        finally:
            self.sniffer_running = False
            self.stop_button.config(state=tk.DISABLED)
            self.save_button.config(state=tk.NORMAL)

# Main application entry point
if _name_ == "_main_":
    root = tk.Tk()
    app = NetworkSnifferApp(root)
    root.mainloop()
